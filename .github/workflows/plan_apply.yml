name: Deploy â€” Terraform plan & apply

on:
  push:
    branches: [main]
    paths:
      - "infra/terraform/**"
      - "environments/**"
      - ".github/workflows/plan_apply.yml"
  pull_request:
    branches: [main]
    paths:
      - "infra/terraform/**"
      - "environments/**"
      - ".github/workflows/plan_apply.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:     ${{ secrets.AWS_REGION }}
  TF_WORKING_DIR: infra/terraform
  TF_WORKSPACE:   dev
  # IMPORTANT: paths below are resolved from TF_WORKING_DIR (infra/terraform)
  TF_VARS:        environments/dev/dev.tfvars            # inside infra/terraform
  TF_VARS_DIGEST: ../environments/dev/app.auto.tfvars    # repo root -> environments/dev

jobs:
  plan-apply:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (deploy repo)
        uses: actions/checkout@v4

      - name: Validate AWS_TF_DEPLOY_ROLE secret format
        run: |
          if [ -z "${{ secrets.AWS_TF_DEPLOY_ROLE }}" ]; then
            echo "ERROR: AWS_TF_DEPLOY_ROLE secret is empty or undefined."; exit 1
          fi
          case "${{ secrets.AWS_TF_DEPLOY_ROLE }}" in
            arn:aws:iam::*:role/*) echo "Role ARN format looks OK." ;;
            *) echo "ERROR: AWS_TF_DEPLOY_ROLE is not a valid IAM role ARN"; exit 1 ;;
          esac

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_TF_DEPLOY_ROLE }}
          role-session-name: tf-deploy
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.3'

      - name: Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Verify var files exist
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          set -e
          echo "PWD: $(pwd)"
          echo "Listing here:"; ls -la
          echo "Listing environments/dev under working dir:"; ls -la environments/dev || true
          echo "Listing ../environments/dev from working dir:"; ls -la ../environments/dev || true

          if [ ! -f "${{ env.TF_VARS }}" ]; then
            echo "MISSING: ${{ env.TF_VARS }}"; exit 1; fi
          if [ ! -f "${{ env.TF_VARS_DIGEST }}" ]; then
            echo "MISSING: ${{ env.TF_VARS_DIGEST }}"; exit 1; fi

          echo "OK: found ${{ env.TF_VARS }} and ${{ env.TF_VARS_DIGEST }}"

      - name: Show active workspace (from env)
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_WORKSPACE: ${{ env.TF_WORKSPACE }}
        run: |
          echo "TF_WORKSPACE=$TF_WORKSPACE"
          terraform workspace show

      - name: Fmt & Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform fmt -recursive
          terraform validate

      - name: Plan (dev)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -input=false -var-file="${{ env.TF_VARS }}" -var-file="${{ env.TF_VARS_DIGEST }}" -out=tfplan

      - name: Upload plan artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}/tfplan

      - name: Apply (dev)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan
