name: Deploy - Terraform Plan & Apply

on:
  pull_request:
    branches: [main]
    paths:
      - "infra/terraform/**"
      - ".github/workflows/plan_apply.yml"
  push:
    branches: [main]
    paths:
      - "infra/terraform/**"
      - ".github/workflows/plan_apply.yml"
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}              # should be "us-east-2"
  TF_WORKDIR: infra/terraform
  TF_VARS:    environments/dev/dev.tfvars

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Show AWS caller identity & region
        run: |
          echo "AWS_REGION=${AWS_REGION}"
          aws sts get-caller-identity
          aws configure list

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Debug — Show tfvars
        run: |
          cat ${{ env.TF_WORKDIR }}/${{ env.TF_VARS }}

      - name: Debug — Describe ALB and validate its subnets/SGs
        shell: bash
        run: |
          set -euo pipefail
          ALB_NAME="micro-dev-alb"
          echo "Describing ALB: ${ALB_NAME} in ${AWS_REGION}"
          ALB_JSON=$(aws elbv2 describe-load-balancers --names "${ALB_NAME}" --region "${AWS_REGION}")
          echo "${ALB_JSON}" | jq

          VPC_ID=$(echo "${ALB_JSON}" | jq -r '.LoadBalancers[0].VpcId')
          SGs=$(echo "${ALB_JSON}"  | jq -r '.LoadBalancers[0].SecurityGroups[]')
          SUBNETS=$(echo "${ALB_JSON}" | jq -r '.LoadBalancers[0].AvailabilityZones[].SubnetId')

          echo "ALB VPC: ${VPC_ID}"
          echo "ALB SGs:"
          echo "${SGs}"
          echo "ALB Subnets:"
          echo "${SUBNETS}"

          echo "Verifying each subnet exists in ${AWS_REGION}..."
          for S in ${SUBNETS}; do
            echo " - ${S}"
            aws ec2 describe-subnets --subnet-ids "${S}" --region "${AWS_REGION}" >/dev/null
          done
          echo "Subnet verification complete."

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform init -upgrade

      - name: Terraform Fmt
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform validate

      - name: Terraform Workspace (dev)
        working-directory: ${{ env.TF_WORKDIR }}
        run: |
          terraform workspace new dev || true
          terraform workspace select dev

      - name: Terraform Plan
        if: github.event_name != 'push'
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform plan -var-file="${{ env.TF_VARS }}"

      - name: Terraform Apply (main pushes only)
        if: github.event_name == 'push'
        working-directory: ${{ env.TF_WORKDIR }}
        run: terraform apply -auto-approve -var-file="${{ env.TF_VARS }}"
