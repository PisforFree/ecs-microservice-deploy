name: Terraform Plan & Apply (ECS Deploy)

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  TF_IN_AUTOMATION: "true"
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
  plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Detect the Terraform working directory dynamically
      - name: Detect Terraform directory
        id: tfdir
        run: |
          set -e
          if [ -d "infra/terraform" ]; then
            echo "path=infra/terraform" >> $GITHUB_OUTPUT
          elif [ -d "ecs-microservices-deploy/infra/terraform" ]; then
            echo "path=ecs-microservices-deploy/infra/terraform" >> $GITHUB_OUTPUT
          else
            echo "::error::Could not find infra/terraform or ecs-microservices-deploy/infra/terraform"
            exit 1
          fi
          echo "Using Terraform dir: $(cat $GITHUB_OUTPUT)"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform init (reconfigure)
        working-directory: ${{ steps.tfdir.outputs.path }}
        run: terraform init -reconfigure

      - name: Select or create workspace
        working-directory: ${{ steps.tfdir.outputs.path }}
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform fmt & validate
        working-directory: ${{ steps.tfdir.outputs.path }}
        run: |
          terraform fmt -check
          terraform validate -var-file=environments/dev/dev.tfvars

      - name: Terraform plan (no input)
        id: plan
        working-directory: ${{ steps.tfdir.outputs.path }}
        run: |
          set -e
          terraform plan -no-color -input=false \
            -var-file=environments/dev/dev.tfvars | tee plan.txt
          {
            echo "stdout<<EOF"
            cat plan.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Comment plan on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-plan
          message: |
            ### Terraform Plan (dev)
            ```
            ${{ steps.plan.outputs.stdout }}
            ```
          recreate: true

  apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Terraform directory
        id: tfdir
        run: |
          set -e
          if [ -d "infra/terraform" ]; then
            echo "path=infra/terraform" >> $GITHUB_OUTPUT
          elif [ -d "ecs-microservices-deploy/infra/terraform" ]; then
            echo "path=ecs-microservices-deploy/infra/terraform" >> $GITHUB_OUTPUT
          else
            echo "::error::Could not find infra/terraform or ecs-microservices-deploy/infra/terraform"
            exit 1
          fi

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform init (reconfigure)
        working-directory: ${{ steps.tfdir.outputs.path }}
        run: terraform init -reconfigure

      - name: Select workspace
        working-directory: ${{ steps.tfdir.outputs.path }}
        run: terraform workspace select dev

      - name: Terraform apply (no input)
        working-directory: ${{ steps.tfdir.outputs.path }}
        run: terraform apply -auto-approve -input=false -var-file=environments/dev/dev.tfvars

