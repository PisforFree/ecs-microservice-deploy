name: Terraform Plan & Apply (ECS Deploy)

on:
  workflow_dispatch:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

permissions:
  contents: read
  pull-requests: write
  id-token: write

concurrency:
  group: terraform-ecs-deploy
  cancel-in-progress: true

env:
  TF_IN_AUTOMATION: "true"
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
  plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infra/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform init (reconfigure)
        run: terraform init -input=false -reconfigure

      - name: Select or create workspace (dev)
        run: |
          set -euo pipefail
          terraform workspace select dev || terraform workspace new dev
          terraform workspace show

      - name: Verify tfvars exists and export path
        run: |
          set -euo pipefail
          TFVARS="$(pwd)/environments/dev/dev.tfvars"
          if [ ! -f "$TFVARS" ]; then
            echo "Expected tfvars not found at: $TFVARS"
            echo "--- DEBUG TREE ---"
            pwd && ls -la
            echo "---- environments ----"
            ls -la environments || true
            echo "---- environments/dev ----"
            ls -la environments/dev || true
            exit 1
          fi
          echo "TFVARS=$TFVARS" >> "$GITHUB_ENV"

      - name: Terraform fmt (check only)
        run: terraform fmt -recursive -check

      # NOTE: validate often fails on unknown vars; rely on plan instead.
      # Keep it as a soft warning (does not fail CI).
      - name: Terraform validate (soft)
        continue-on-error: true
        run: terraform validate -no-color || true

      - name: Terraform plan
        run: |
          set -euo pipefail
          echo "Using tfvars: $TFVARS"
          terraform plan -input=false -no-color -var-file="$TFVARS" -out=tfplan

  apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infra/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform init (reconfigure)
        run: terraform init -input=false -reconfigure

      - name: Select or create workspace (dev)
        run: |
          set -euo pipefail
          terraform workspace select dev || terraform workspace new dev
          terraform workspace show

      - name: Verify tfvars exists and export path
        run: |
          set -euo pipefail
          TFVARS="$(pwd)/environments/dev/dev.tfvars"
          if [ ! -f "$TFVARS" ]; then
            echo "Expected tfvars not found at: $TFVARS"
            echo "--- DEBUG TREE ---"
            pwd && ls -la
            echo "---- environments ----"
            ls -la environments || true
            echo "---- environments/dev ----"
            ls -la environments/dev || true
            exit 1
          fi
          echo "TFVARS=$TFVARS" >> "$GITHUB_ENV"

      - name: Terraform plan & apply
        run: |
          set -euo pipefail
          echo "Using tfvars: $TFVARS"
          terraform plan -input=false -no-color -var-file="$TFVARS" -out=tfplan
          terraform apply -input=false -auto-approve tfplan


