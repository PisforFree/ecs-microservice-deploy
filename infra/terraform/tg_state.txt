# module.alb.aws_lb_target_group.app:
resource "aws_lb_target_group" "app" {
    arn                               = "arn:aws:elasticloadbalancing:us-east-2:803767876973:targetgroup/micro-dev-tg-80/9f9bbaf61d8f7551"
    arn_suffix                        = "targetgroup/micro-dev-tg-80/9f9bbaf61d8f7551"
    deregistration_delay              = "300"
    id                                = "arn:aws:elasticloadbalancing:us-east-2:803767876973:targetgroup/micro-dev-tg-80/9f9bbaf61d8f7551"
    ip_address_type                   = "ipv4"
    load_balancer_arns                = [
        "arn:aws:elasticloadbalancing:us-east-2:803767876973:loadbalancer/app/micro-dev-alb/8e1ed4b4b414ef9f",
    ]
    load_balancing_algorithm_type     = "round_robin"
    load_balancing_anomaly_mitigation = "off"
    load_balancing_cross_zone_enabled = "use_load_balancer_configuration"
    name                              = "micro-dev-tg-80"
    name_prefix                       = null
    port                              = 80
    protocol                          = "HTTP"
    protocol_version                  = "HTTP1"
    slow_start                        = 0
    tags                              = {
        "Name"    = "micro-dev-tg-80"
        "env"     = "dev"
        "project" = "micro"
    }
    tags_all                          = {
        "Name"    = "micro-dev-tg-80"
        "env"     = "dev"
        "project" = "micro"
    }
    target_type                       = "ip"
    vpc_id                            = "vpc-06ea32c95833148f2"

    health_check {
        enabled             = true
        healthy_threshold   = 2
        interval            = 30
        matcher             = "200-399"
        path                = "/"
        port                = "traffic-port"
        protocol            = "HTTP"
        timeout             = 5
        unhealthy_threshold = 2
    }

    stickiness {
        cookie_duration = 86400
        cookie_name     = null
        enabled         = false
        type            = "lb_cookie"
    }

    target_failover {}

    target_group_health {
        dns_failover {
            minimum_healthy_targets_count      = "1"
            minimum_healthy_targets_percentage = "off"
        }
        unhealthy_state_routing {
            minimum_healthy_targets_count      = 1
            minimum_healthy_targets_percentage = "off"
        }
    }

    target_health_state {}
}
