name: Terraform Plan & Apply (ECS Deploy)

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  TF_IN_AUTOMATION: "true"
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

jobs:
  plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify terraform path exists
        working-directory: .
        run: |
          if [ ! -d "infra/terraform" ]; then
            echo "::error::Expected directory 'infra/terraform' not found in this PR branch."
            exit 1
          fi

      # DEBUG: print OIDC aud + sub so we can match trust policy exactly
      - name: Inspect OIDC claims (debug)
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core')
            const token = await core.getIDToken('sts.amazonaws.com')
            const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString())
            console.log('OIDC aud:', payload.aud)
            console.log('OIDC sub:', payload.sub)

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform init (reconfigure)
        run: terraform init -reconfigure

      - name: Select or create workspace
        run: terraform workspace select dev || terraform workspace new dev

      - name: Terraform fmt & validate
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform plan (no input)
        id: plan
        run: |
          set -e
          terraform plan -no-color -input=false | tee plan.txt
          {
            echo "stdout<<EOF"
            cat plan.txt
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Comment plan on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-plan
          message: |
            ### Terraform Plan (dev)
            ```
            ${{ steps.plan.outputs.stdout }}
            ```
          recreate: true

  apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: infra/terraform
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify terraform path exists
        working-directory: .
        run: |
          if [ ! -d "infra/terraform" ]; then
            echo "::error::Expected directory 'infra/terraform' not found on main."
            exit 1
          fi

      # DEBUG: print OIDC aud + sub for push-to-main
      - name: Inspect OIDC claims (debug)
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core')
            const token = await core.getIDToken('sts.amazonaws.com')
            const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString())
            console.log('OIDC aud:', payload.aud)
            console.log('OIDC sub:', payload.sub)

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform init (reconfigure)
        run: terraform init -reconfigure

      - name: Select workspace
        run: terraform workspace select dev

      - name: Terraform apply (no input)
        run: terraform apply -auto-approve -input=false
